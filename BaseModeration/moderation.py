from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from database.moderation import get_moderation_settings, save_moderation_settings
from keyboards.moderationKeyboards import (
    edit_message_kb,
    edit_message_text_kb,
    moderation_kb,
    moderations_kb,
)
from utils.states import EditForm, ModStates
from utils.texts import (
    ACTION_INFO,
    BAN_INFO,
    KICK_INFO,
    MUTE_INFO,
    default_moderation_settings,
)

moderation_router = Router()

TEXTS = {
    "main": (
        "üõ° –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    ),
    "status": ("\n\n{} {}"),
    "message_settings": (
        "üìú –ú–æ–¥–µ—Ä–∞—Ü–∏—è\n\n"
        "üìÑ –¢–µ–∫—Å—Ç: {} {}\n\n"
        "üëâüèª –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    ),
    "edit_text": ("üëâüèª –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {} (HTML —Ä–∞–∑—Ä–µ—à—ë–Ω)."),
    "buttons_unavailable": ("‚ùå –ö–Ω–æ–ø–∫–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"),
    "preview_title": ("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"),
    "default_text": ("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"),
    "statuses": {
        "enabled": "–í–∫–ª—é—á–µ–Ω–æ",
        "disabled": "–û—Ç–∫–ª—é—á–µ–Ω–æ",
        "logs_enabled": "–õ–æ–≥–∏ –≤ –∂—É—Ä–Ω–∞–ª –≤–∫–ª—é—á–µ–Ω—ã",
        "logs_disabled": "–õ–æ–≥–∏ –≤ –∂—É—Ä–Ω–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω—ã",
        "delete_enabled": "–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–æ",
        "delete_disabled": "–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–æ",
    },
}


@moderation_router.callback_query(F.data.startswith("moderations:"))
async def moderation_callback(callback: CallbackQuery, state: FSMContext):
    chat_id = int(callback.data.split(":")[1])
    await state.set_state(ModStates.managing_chat)
    await state.update_data(chat_id=chat_id)
    await callback.message.edit_text(
        TEXTS["main"], reply_markup=await moderation_kb(chat_id)
    )


@moderation_router.callback_query(F.data.startswith("moderation:"))
async def moderation_action_callback(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split(":")[-1]
    data = await state.get_data()
    chat_id = int(data.get("chat_id"))
    action_texts = {"mute": MUTE_INFO, "ban": BAN_INFO, "kick": KICK_INFO}

    await callback.message.edit_text(
        action_texts[action], reply_markup=await moderations_kb(chat_id, action)
    )


@moderation_router.callback_query(F.data.startswith("s:"))
async def moderation_switch_callback(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split(":")[-1]
    moderation_action = callback.data.split(":")[1]
    data = await state.get_data()
    chat_id = int(data.get("chat_id"))
    settings = await get_moderation_settings(chat_id, moderation_action)

    match action:
        case "switch":
            enabled = settings.get(moderation_action, {}).get("enabled", False)
            new_status = not enabled
            await save_moderation_settings(
                chat_id=chat_id, command_type=moderation_action, enabled=new_status
            )

            status = TEXTS["status"].format(
                "‚úÖ" if new_status else "‚ùå",
                (
                    TEXTS["statuses"]["enabled"]
                    if new_status
                    else TEXTS["statuses"]["disabled"]
                ),
            )
            await callback.message.edit_text(
                text=ACTION_INFO[moderation_action] + status,
                reply_markup=await moderations_kb(chat_id, moderation_action),
            )

        case "journal":
            enabled = settings.get(moderation_action, {}).get("journal", False)
            new_status = not enabled
            await save_moderation_settings(
                chat_id=chat_id, command_type=moderation_action, journal=new_status
            )

            status = TEXTS["status"].format(
                "‚úÖ" if new_status else "‚ùå",
                (
                    TEXTS["statuses"]["logs_enabled"]
                    if new_status
                    else TEXTS["statuses"]["logs_disabled"]
                ),
            )
            await callback.message.edit_text(
                text=ACTION_INFO[moderation_action] + status,
                reply_markup=await moderations_kb(chat_id, moderation_action),
            )

        case "delete_message":
            enabled = settings.get(moderation_action, {}).get("delete_message", False)
            new_status = not enabled
            await save_moderation_settings(
                chat_id=chat_id,
                command_type=moderation_action,
                delete_message=new_status,
            )

            status = TEXTS["status"].format(
                "‚úÖ" if new_status else "‚ùå",
                (
                    TEXTS["statuses"]["delete_enabled"]
                    if new_status
                    else TEXTS["statuses"]["delete_disabled"]
                ),
            )
            await callback.message.edit_text(
                text=ACTION_INFO[moderation_action] + status,
                reply_markup=await moderations_kb(chat_id, moderation_action),
            )

        case "settings":
            text_status = (
                "‚úÖ" if settings.get(moderation_action, {}).get("text") else "‚ùå"
            )
            text = settings.get(moderation_action, {}).get(
                "text", TEXTS["default_text"]
            )

            await state.update_data(moderation_action=moderation_action)
            await callback.message.edit_text(
                text=TEXTS["message_settings"].format(text_status, text),
                reply_markup=await edit_message_kb(chat_id, "moderation"),
                parse_mode="HTML",
            )


async def handle_moderation_callback(
    callback: CallbackQuery, target: str, state: FSMContext
):
    data = await state.get_data()
    chat_id = data.get("chat_id")
    moderation_action = data.get("moderation_action")
    action_texts = {"mute": MUTE_INFO, "ban": BAN_INFO, "kick": KICK_INFO}

    match target:
        case "text":
            await callback.message.edit_text(
                text=TEXTS["edit_text"].format(moderation_action.upper()),
                reply_markup=await edit_message_text_kb(chat_id, "moderation", "text"),
                parse_mode="HTML",
            )
            await state.set_state(EditForm.TEXT)

        case "buttons":
            await callback.answer(TEXTS["buttons_unavailable"], show_alert=True)

        case "preview":
            settings = await get_moderation_settings(chat_id, moderation_action)
            moderation_text = settings.get(moderation_action, {}).get(
                "text", TEXTS["default_text"]
            )

            await callback.message.edit_text(text=moderation_text, parse_mode="HTML")
            await callback.message.answer(
                text=TEXTS["preview_title"],
                reply_markup=await edit_message_kb(chat_id, "moderation"),
                parse_mode="HTML",
            )

        case target if target.startswith("del"):
            await save_moderation_settings(
                chat_id=chat_id,
                command_type=moderation_action,
                text=default_moderation_settings[moderation_action]["text"],
            )
            settings = await get_moderation_settings(chat_id, moderation_action)
            text_status = (
                "‚úÖ" if settings.get(moderation_action, {}).get("text") else "‚ùå"
            )
            text = settings.get(moderation_action, {}).get(
                "text", TEXTS["default_text"]
            )

            await state.update_data(moderation_action=moderation_action)
            await callback.message.edit_text(
                text=TEXTS["message_settings"].format(text_status, text),
                reply_markup=await edit_message_kb(chat_id, "moderation"),
                parse_mode="HTML",
            )

        case "back":
            await callback.message.edit_text(
                text=action_texts[moderation_action],
                reply_markup=await moderations_kb(chat_id, moderation_action),
            )

        case "mback":
            await callback.message.edit_text(
                text=TEXTS["main"], reply_markup=await moderation_kb(chat_id)
            )

        case "back_to_edit":
            settings = await get_moderation_settings(chat_id, moderation_action)
            text_status = (
                "‚úÖ" if settings.get(moderation_action, {}).get("text") else "‚ùå"
            )
            text = settings.get(moderation_action, {}).get(
                "text", TEXTS["default_text"]
            )

            await callback.message.edit_text(
                text=TEXTS["message_settings"].format(text_status, text),
                reply_markup=await edit_message_kb(chat_id, "moderation"),
                parse_mode="HTML",
            )
            data = await state.get_data()
            await state.clear()
            await state.update_data(moderation_action=data.get("moderation_action"))
