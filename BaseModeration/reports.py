from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message


from BaseModeration.BaseModerationHelpers import format_keyboard
from database.reports import get_report_settings, save_report_settings
from keyboards.moderationKeyboards import (
    edit_message_kb,
    edit_message_text_kb,
    report_kb,
)
from utils.states import EditForm, ModStates
from utils.texts import BUTTONS_MESSAGE, REPORT_MESSAGE

report_router = Router()

TEXTS = {
    "main": (
        "<b>üÜò /report</b>\n"
        "–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –¥–æ—Å—Ç—É–ø–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –≥—Ä—É–ø–ø—ã.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∫–∞–∫–æ–π-–ª–∏–±–æ –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–±–ª—é–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã.\n\n"
        "–í —ç—Ç–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å:\n"
        "- –ö—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç—á–µ—Ç—ã, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å.\n"
        "- –ù—É–∂–Ω–æ –ª–∏ –ø–æ–º–µ—á–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª –Ω–∞–ø—Ä—è–º—É—é.\n\n"
        "‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ <b>/report</b> –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å "
        '—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π".\n'
    ),
    "settings_view": (
        "üìú –†–µ–ø–æ—Ä—Ç—ã\n\n"
        "üìÑ –¢–µ–∫—Å—Ç: {} {}\n\n"
        "üëâüèª –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    ),
    "status": ("\n<b>{} {}</b>"),
    "edit_text": (
        "üëâüèª –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (HTML —Ä–∞–∑—Ä–µ—à—ë–Ω)."
    ),
    "errors": {
        "no_reply": "–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è.",
        "private_chat": "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.",
    },
    "report_template": (
        "–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∂–∞–ª–æ–±–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ {} (ID —á–∞—Ç–∞: {})\n\n"
        "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {} (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {})\n"
        "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: https://t.me/c/{}/{}"
    ),
    "default_report_text": "–†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
    "default_response": "–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
    "statuses": {
        "enabled": "–í–∫–ª—é—á–µ–Ω–æ",
        "disabled": "–í—ã–∫–ª—é—á–µ–Ω–æ",
        "delete_enabled": "–£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "delete_disabled": "–£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
    },
}


async def get_chat_administrators(message, chat_id):
    admins = await message.bot.get_chat_administrators(chat_id)
    return [
        admin.user.id
        for admin in admins
        if (getattr(admin, "can_restrict_members", False) or admin.status == "creator")
    ]


@report_router.callback_query(F.data.startswith("reports:"))
async def reports(callback: CallbackQuery, state: FSMContext):
    chat_id = int(callback.data.split(":")[1])
    await state.set_state(ModStates.managing_chat)
    await state.update_data(chat_id=chat_id)
    await callback.message.edit_text(
        text=TEXTS["main"], reply_markup=await report_kb(chat_id), parse_mode="HTML"
    )


@report_router.callback_query(F.data.startswith("report:"))
async def report_callback(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    chat_id = int(data.get("chat_id"))
    action = callback.data.split(":")[-1]
    settings = await get_report_settings(chat_id)

    match action:
        case "switch":
            enable = not settings["enable_reports"]
            await save_report_settings(chat_id, enable_reports=enable)

            status = TEXTS["status"].format(
                "‚úÖ" if enable else "‚ùå",
                (
                    TEXTS["statuses"]["enabled"]
                    if enable
                    else TEXTS["statuses"]["disabled"]
                ),
            )
            await callback.message.edit_text(
                text=TEXTS["main"] + status,
                reply_markup=await report_kb(chat_id),
                parse_mode="HTML",
            )

        case "delete_message":
            delete = not settings["delete_reported_messages"]
            await save_report_settings(chat_id, delete_reported_messages=delete)

            status = TEXTS["status"].format(
                "‚úÖ" if delete else "‚ùå",
                (
                    TEXTS["statuses"]["delete_enabled"]
                    if delete
                    else TEXTS["statuses"]["delete_disabled"]
                ),
            )
            await callback.message.edit_text(
                text=TEXTS["main"] + status,
                reply_markup=await report_kb(chat_id),
                parse_mode="HTML",
            )

        case "settings":
            text_status = "‚úÖ" if settings["report_text_template"] else "‚ùå"
            await callback.message.edit_text(
                text=TEXTS["settings_view"].format(
                    text_status, settings["report_text_template"]
                ),
                reply_markup=await edit_message_kb(chat_id, "report"),
                parse_mode="HTML",
            )


async def handle_report_callback(
    callback: CallbackQuery, target: str, state: FSMContext
):
    data = await state.get_data()
    chat_id = data.get("chat_id")

    match target:
        case "text":
            await callback.message.edit_text(
                text=TEXTS["edit_text"],
                reply_markup=await edit_message_text_kb(
                    chat_id, "report", to_delete="text"
                ),
                parse_mode="HTML",
            )
            await state.set_state(EditForm.TEXT)

        case "buttons":
            await callback.message.edit_text(
                text=BUTTONS_MESSAGE,
                reply_markup=await edit_message_text_kb(
                    chat_id, "report", to_delete="buttons"
                ),
                parse_mode="HTML",
                disable_web_page_preview=True,
            )
            await state.set_state(EditForm.BUTTONS)

        case "preview":
            settings = await get_report_settings(chat_id)
            await callback.message.edit_text(
                text=settings["report_text_template"],
                reply_markup=await format_keyboard(settings["buttons"]),
                parse_mode="HTML",
            )
            text_status = "‚úÖ" if settings["report_text_template"] else "‚ùå"
            await callback.message.answer(
                text=TEXTS["settings_view"].format(
                    text_status, settings["report_text_template"]
                ),
                reply_markup=await edit_message_kb(chat_id, "report"),
                parse_mode="HTML",
            )

        case target if target.startswith("del"):
            to_del = target.split("del")[1]
            match to_del:
                case "text":
                    await save_report_settings(
                        chat_id, report_text_template=TEXTS["default_report_text"]
                    )
                case "buttons":
                    await save_report_settings(chat_id, buttons=[])

            settings = await get_report_settings(chat_id)
            text_status = "‚úÖ" if settings["report_text_template"] else "‚ùå"
            await callback.message.edit_text(
                text=TEXTS["settings_view"].format(
                    text_status, settings["report_text_template"]
                ),
                reply_markup=await edit_message_kb(chat_id, "report"),
                parse_mode="HTML",
            )
            await state.clear()

        case "back":
            await callback.message.edit_text(
                text=REPORT_MESSAGE,
                reply_markup=await report_kb(chat_id),
                parse_mode="HTML",
            )

        case "back_to_edit":
            settings = await get_report_settings(chat_id)
            text_status = "‚úÖ" if settings["report_text_template"] else "‚ùå"
            await callback.message.edit_text(
                text=TEXTS["settings_view"].format(
                    text_status, settings["report_text_template"]
                ),
                reply_markup=await edit_message_kb(chat_id, "report"),
                parse_mode="HTML",
            )
            await state.clear()


@report_router.message(Command("report", ignore_case=True))
async def handle_report(message: Message):
    if message.chat.type == "private":
        await message.reply(TEXTS["errors"]["private_chat"])
        return

    if not message.reply_to_message:
        await message.reply(TEXTS["errors"]["no_reply"])
        return

    chat_id = message.chat.id
    settings = await get_report_settings(chat_id)

    if not settings["enable_reports"]:
        return

    admins = await get_chat_administrators(message, chat_id)

    if message.from_user.id in admins:
        return

    report_message = TEXTS["report_template"].format(
        message.chat.title,
        message.chat.id,
        message.from_user.full_name,
        message.from_user.id,
        str(message.chat.id)[4:],
        message.reply_to_message.message_id,
    )

    sent_count = 0
    for admin_id in admins:
        try:
            await message.bot.send_message(admin_id, report_message, parse_mode="HTML")
            sent_count += 1
        except (TelegramBadRequest, TelegramForbiddenError) as e:
            continue


    await message.reply(
        settings.get("report_text_template", TEXTS["default_response"]),
        reply_markup=await format_keyboard(settings.get("buttons", [])),
        parse_mode="HTML",
    )

    if settings.get("delete_reported_messages"):
        try:
            await message.reply_to_message.delete()
        except TelegramBadRequest as e:
            print(f"Failed to delete reported message in chat {chat_id}: {e}")
