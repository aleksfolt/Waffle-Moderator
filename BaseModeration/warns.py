import html

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from BaseModeration.BaseModerationHelpers import (
    apply_punishment,
    format_text,
    parse_seconds_time,
)
from database.utils import get_user_by_id_or_username
from database.warns import (
    add_warn,
    get_warn_settings,
    get_warns_count,
    remove_warn,
    reset_warns,
    save_warn_settings,
)
from keyboards.moderationKeyboards import (
    back_to_warns,
    edit_message_kb,
    edit_message_text_kb,
    get_moderation_action_kb,
    warns_kb,
)
from middlefilters.HasPromoteRights import HasPromoteRights
from utils.states import EditForm, warnForm, ModStates

warns_router = Router()

TEXTS = {
    "main": (
        "‚ùóÔ∏è–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∑–∞ –∏—Ö "
        "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞–∫–∞–∑—ã–≤–∞—Ç—å –∏—Ö.\n\n"
        "–í —ç—Ç–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:\n"
        "‚Ä¢ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–µ–≤—ã—Å–∏–≤—à–∏—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —á–∏—Å–ª–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\n"
        "‚Ä¢ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —á–∏—Å–ª–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"
    ),
    "time_input": (
        "‚è± <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–π—á–∞—Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–∫–∞–∑–∞–Ω–∏—è\n"
        "‚îî –ú–∏–Ω–∏–º—É–º: 30 —Å–µ–∫—É–Ω–¥\n"
        "‚îî –ú–∞–∫—Å–∏–º—É–º: 365 –¥–Ω–µ–π\n\n"
        "–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞:\n"
        "‚îî 3 m, 2 d, 12 h, 4 m, 34 s\n\n"
        "–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:\n"
        "‚îî d - –¥–Ω–∏\n"
        "‚îî h - —á–∞—Å—ã\n"
        "‚îî m - –º–∏–Ω—É—Ç—ã\n"
        "‚îî s - —Å–µ–∫—É–Ω–¥—ã"
    ),
    "settings_view": (
        "‚ùóÔ∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n\n"
        "üìÑ –¢–µ–∫—Å—Ç: {} {}\n\n"
        "üëâüèª –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    ),
    "edit_text": (
        "üëâüèª –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (HTML —Ä–∞–∑—Ä–µ—à—ë–Ω)."
    ),
    "status": ("\n\n<b>{} {}</b>"),
    "errors": {
        "warns_disabled": "‚ö†Ô∏è –í–∞—Ä–Ω—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ.",
        "user_not_found": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–∞—Ä–Ω–∞.",
        "buttons_unavailable": "‚ùå –ö–Ω–æ–ø–∫–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
        "invalid_time": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏",
        "no_warns": "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π",
    },
    "success": {
        "saved": "‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
        "action_set": "\n\n<b>‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {}</b>",
        "warns_set": "\n\n<b>‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π</b>",
        "warn_decreased": "‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π —É–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è {}",
        "unwarn": "‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è {}",
    },
    "warnings": {
        "max_reached": "üö® {} –î–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.\n{}!"
    },
    "moderation_actions": {
        "ban": "–±–∞–Ω.",
        "kick": "–∫–∏–∫ –∏–∑ —á–∞—Ç–∞.",
        "mute": "–æ–±–µ–∑–∑–≤—É—á–∏–≤–∞–Ω–∏–µ.",
    },
    "punishments": {
        "mute": "üîá –ú—É—Ç {}.",
        "ban": "üö´ –ë–∞–Ω {}",
        "kick": "üë¢ –ö–∏–∫ –∏–∑ —á–∞—Ç–∞.",
        "error": "‚ùå –û—à–∏–±–∫–∞: {}",
    },
    "default_text": "%%__mention__%% [%%__user_id__%%] –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω (%%__warn_count__%%/%%__max_warns__%%).",
    "default_reason": "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã",
}


@warns_router.callback_query(F.data.startswith("warns"))
async def warns_callback(callback: CallbackQuery, state: FSMContext):
    chat_id = callback.data.split(":")[1]
    await state.set_state(ModStates.managing_chat)
    await state.update_data(chat_id=chat_id)
    await callback.message.edit_text(
        TEXTS["main"], reply_markup=await warns_kb(chat_id)
    )


@warns_router.callback_query(F.data.startswith("warn:"))
async def warn_callback(callback: CallbackQuery, state: FSMContext) -> None:
    data = callback.data.split(":")
    action = data[1]
    state_data = await state.get_data()
    chat_id = int(state_data.get("chat_id"))

    match action:
        case "switch":
            settings = await get_warn_settings(chat_id)
            enable = not settings["enable"]
            await save_warn_settings(chat_id, enable=enable)

            await callback.message.edit_text(
                text=TEXTS["main"] + TEXTS["status"].format(
                    "‚úÖ" if enable else "‚ùå",
                    "–í–∫–ª—é—á–µ–Ω–æ" if enable else "–í—ã–∫–ª—é—á–µ–Ω–æ"
                ),
                reply_markup=await warns_kb(chat_id),
                parse_mode="HTML"
            )

        case "action":
            action_type = data[2]
            await save_warn_settings(chat_id, action=action_type)

            await callback.message.edit_text(
                text=TEXTS["main"] + TEXTS["success"]["action_set"].format(
                    TEXTS["moderation_actions"][action_type]
                ),
                reply_markup=await warns_kb(chat_id),
                parse_mode="HTML"
            )

        case "count":
            count = int(data[2])
            await save_warn_settings(chat_id, warns_count=count)

            await callback.message.edit_text(
                text=TEXTS["main"] + TEXTS["success"]["warns_set"].format(count),
                reply_markup=await warns_kb(chat_id),
                parse_mode="HTML"
            )

        case "duration":
            await state.update_data(chat_id=chat_id)
            await callback.message.edit_text(
                text=TEXTS["time_input"],
                reply_markup=await back_to_warns(chat_id)
            )
            await state.set_state(warnForm.DURATION)

        case "back":
            await callback.message.edit_text(
                text=TEXTS["main"],
                reply_markup=await warns_kb(chat_id),
                parse_mode="HTML"
            )
            await state.clear()

        case "settings":
            settings = await get_warn_settings(chat_id)
            text_status = "‚úÖ" if settings["text"] else "‚ùå"

            await callback.message.edit_text(
                text=TEXTS["settings_view"].format(text_status, settings["text"]),
                reply_markup=await edit_message_kb(chat_id, "warn"),
                parse_mode="HTML"
            )


async def handle_warn_callback(callback: CallbackQuery, target: str, state: FSMContext):
    data = await state.get_data()
    chat_id = data.get("chat_id")

    match target:
        case "text":
            await callback.message.edit_text(
                text=TEXTS["edit_text"],
                reply_markup=await edit_message_text_kb(
                    chat_id, "warn", to_delete="text"
                ),
                parse_mode="HTML",
            )
            await state.set_state(EditForm.TEXT)

        case "buttons":
            await callback.answer(
                TEXTS["errors"]["buttons_unavailable"], show_alert=True
            )

        case "preview":
            settings = await get_warn_settings(chat_id)
            await callback.message.edit_text(text=settings["text"], parse_mode="HTML")
            text_status = "‚úÖ" if settings["text"] else "‚ùå"
            await callback.message.answer(
                text=TEXTS["settings_view"].format(text_status, settings["text"]),
                reply_markup=await edit_message_kb(chat_id, "warn"),
                parse_mode="HTML",
            )

        case target if target.startswith("del"):
            await save_warn_settings(chat_id, text=TEXTS["default_text"])
            settings = await get_warn_settings(chat_id)
            text_status = "‚úÖ" if settings["text"] else "‚ùå"

            await callback.message.edit_text(
                text=TEXTS["settings_view"].format(text_status, settings["text"]),
                reply_markup=await edit_message_kb(chat_id, "warn"),
                parse_mode="HTML",
            )
            await state.clear()

        case "back":
            await callback.message.edit_text(
                text=TEXTS["main"],
                reply_markup=await warns_kb(chat_id),
                parse_mode="HTML",
            )
            await state.clear()

        case "back_to_edit":
            settings = await get_warn_settings(chat_id)
            text_status = "‚úÖ" if settings["text"] else "‚ùå"

            await callback.message.edit_text(
                text=TEXTS["settings_view"].format(text_status, settings["text"]),
                reply_markup=await edit_message_kb(chat_id, "warn"),
                parse_mode="HTML",
            )
            await state.clear()


@warns_router.message(warnForm.DURATION)
async def warn_duration(msg: Message, state: FSMContext):
    duration = str(msg.text)
    format_duration = str(await parse_seconds_time(duration))
    data = await state.get_data()
    chat_id = data.get("chat_id")

    if format_duration is None:
        await msg.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 30s, 5m, 2h, 1d, 1w –∏–ª–∏ 1y",
            reply_markup=await back_to_warns(chat_id),
        )
        return

    await save_warn_settings(chat_id, duration_action=format_duration)
    await msg.answer(
        text=TEXTS["success"]["saved"], reply_markup=await back_to_warns(chat_id)
    )
    await state.clear()


async def get_warn_decrease_kb(user_id: int, chat_id: int):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ûñ –£–±—Ä–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                    callback_data=f"decrease_warn:{chat_id}:{user_id}",
                )
            ]
        ]
    )


@warns_router.callback_query(F.data.startswith("decrease_warn:"))
async def decrease_warn_callback(callback: CallbackQuery):
    _, chat_id, user_id = callback.data.split(":")
    user_id = int(user_id)
    chat_id = int(chat_id)

    try:
        warns_count = await get_warns_count(chat_id, user_id)
        if warns_count <= 0:
            await callback.answer(TEXTS["errors"]["no_warns"], show_alert=True)
            return

        await remove_warn(chat_id, user_id)
        user = await callback.bot.get_chat_member(chat_id, user_id)
        mention = (
            f"<a href='tg://user?id={user_id}'>{html.escape(user.user.first_name)}</a>"
        )

        await callback.message.edit_text(
            callback.message.text
            + f"\n\n{TEXTS['success']['warn_decreased'].format(mention)}",
            parse_mode="HTML",
        )
    except Exception as e:
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@warns_router.message(Command("warn", ignore_case=True), HasPromoteRights())
async def warn(msg: Message):
    settings = await get_warn_settings(msg.chat.id)
    if not settings["enable"]:
        await msg.answer(TEXTS["errors"]["warns_disabled"])
        return

    target_user = None
    reason = TEXTS["default_reason"]

    if msg.reply_to_message:
        target_user = msg.reply_to_message.from_user
    else:
        args = msg.text.split()[1:]
        if args:
            if args[0].startswith("@"):
                target_user = await get_user_by_id_or_username(username=args[0][1:])
            elif args[0].isdigit():
                target_user = await get_user_by_id_or_username(user_id=int(args[0]))

            if len(args) > 1:
                reason = " ".join(args[1:])

    if not target_user:
        await msg.answer(TEXTS["errors"]["user_not_found"])
        return

    target_user_id = (
        target_user.user_id if hasattr(target_user, "user_id") else target_user.id
    )
    target_first_name = (
        target_user.full_name
        if hasattr(target_user, "full_name")
        else target_user.first_name
    )
    warns_count = await add_warn(msg.chat.id, target_user_id)

    if warns_count >= settings["warns_count"]:
        punishment = await apply_punishment(
            bot=msg.bot,
            chat_id=msg.chat.id,
            user_id=target_user_id,
            action=settings["action"],
            duration=settings["duration_action"],
        )

        warn_text = await format_text(
            template=settings["text"],
            message=msg,
            target_user_id=target_user_id,
            target_first_name=target_first_name,
            duration=str(settings["duration_action"]),
            reason=reason,
        )
        mention = f"<a href='tg://user?id={target_user_id}'>{html.escape(target_first_name)}</a>"
        await msg.answer(
            TEXTS["warnings"]["max_reached"].format(mention, punishment),
            parse_mode="HTML",
            reply_markup=await get_moderation_action_kb(
                target_user_id, settings["action"]
            ),
        )
        await reset_warns(msg.chat.id, target_user_id)
    else:
        warn_text = await format_text(
            template=settings["text"],
            message=msg,
            target_user_id=target_user_id,
            target_first_name=target_first_name,
            reason=reason,
            warns_count=warns_count,
            max_warns=settings["warns_count"],
        )
        await msg.answer(
            warn_text,
            parse_mode="HTML",
            reply_markup=await get_warn_decrease_kb(target_user_id, msg.chat.id),
        )


@warns_router.message(Command("unwarn", ignore_case=True), HasPromoteRights())
async def unwarn(msg: Message):
    settings = await get_warn_settings(msg.chat.id)
    if not settings["enable"]:
        await msg.answer(TEXTS["errors"]["warns_disabled"])
        return

    target_user = None
    if msg.reply_to_message:
        target_user = msg.reply_to_message.from_user
    else:
        args = msg.text.split()[1:]
        if args:
            if args[0].startswith("@"):
                target_user = await get_user_by_id_or_username(username=args[0][1:])
            elif args[0].isdigit():
                target_user = await get_user_by_id_or_username(user_id=int(args[0]))

    if not target_user:
        await msg.answer(TEXTS["errors"]["user_not_found"])
        return

    target_user_id = (
        target_user.user_id if hasattr(target_user, "user_id") else target_user.id
    )
    target_first_name = (
        target_user.full_name
        if hasattr(target_user, "full_name")
        else target_user.first_name
    )

    await reset_warns(msg.chat.id, target_user_id)
    mention = (
        f"<a href='tg://user?id={target_user_id}'>{html.escape(target_first_name)}</a>"
    )
    await msg.answer(TEXTS["success"]["unwarn"].format(mention), parse_mode="HTML")
