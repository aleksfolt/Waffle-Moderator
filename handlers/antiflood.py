from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from BaseModeration.BaseModerationHelpers import parse_seconds_time, punish_user
from config import redis_client
from database.antiflood import get_antiflood_settings, save_antiflood_settings
from keyboards.antifloodKeyboards import (
    antiflood_kb,
    back_to_antiflood,
    numbers_keyboard,
)
from utils.states import AntiFlood, ModStates

antiflood_router = Router()

TEXTS = {
    "main": (
        "üõ° –ê–Ω—Ç–∏—Ñ–ª—É–¥ ‚Äî —Å–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã —á–∞—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –∏ —á–∞—Å—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. "
        "–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–¥–∞—Ç—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ "
        "–ø—Ä–∏–º–µ–Ω—è—Ç—å –º–µ—Ä—ã: –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –º—É—Ç, –∫–∏–∫, –±–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π."
    ),
    "time_input": (
        "‚è± <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–π—á–∞—Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–∫–∞–∑–∞–Ω–∏—è\n"
        "‚îî –ú–∏–Ω–∏–º—É–º: 30 —Å–µ–∫—É–Ω–¥\n"
        "‚îî –ú–∞–∫—Å–∏–º—É–º: 365 –¥–Ω–µ–π\n\n"
        "–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞:\n"
        "‚îî 3 m, 2 d, 12 h, 4 m, 34 s\n\n"
        "–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:\n"
        "‚îî d - –¥–Ω–∏\n"
        "‚îî h - —á–∞—Å—ã\n"
        "‚îî m - –º–∏–Ω—É—Ç—ã\n"
        "‚îî s - —Å–µ–∫—É–Ω–¥—ã"
    ),
    "choose_messages": ("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—à–µ–Ω–∏–π –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∞–Ω—Ç–∏—Ñ–ª—É–¥–∞:"),
    "choose_time": ("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –∞–Ω—Ç–∏—Ñ–ª—É–¥–∞:"),
    "moderation_actions": {
        "ban": "–±–∞–Ω.",
        "kick": "–∫–∏–∫ –∏–∑ —á–∞—Ç–∞.",
        "mute": "–æ–±–µ–∑–∑–≤—É—á–∏–≤–∞–Ω–∏–µ.",
        "warn": "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.",
    },
    "status": ("\n\n{} {}"),
    "action_set": ("\n\n<b>‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {}</b>"),
    "saved": ("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!"),
}


@antiflood_router.callback_query(F.data.startswith("antiflood:"))
async def anti_flood_callback(callback: CallbackQuery, state: FSMContext):
    chat_id = int(callback.data.split(":")[1])
    await state.set_state(ModStates.managing_chat)
    await state.update_data(chat_id=chat_id)
    await callback.message.edit_text(
        TEXTS["main"], reply_markup=await antiflood_kb(chat_id)
    )


@antiflood_router.callback_query(F.data.startswith("af:"))
async def antiflood_callback(callback: CallbackQuery, state: FSMContext):
    data_parts = callback.data.split(":")
    data = await state.get_data()
    chat_id = data.get("chat_id")
    action = data_parts[1]

    match action:
        case "msgs":
            await callback.message.edit_text(
                text=TEXTS["choose_messages"],
                reply_markup=await numbers_keyboard(chat_id, "messages"),
            )

        case "time":
            await callback.message.edit_text(
                text=TEXTS["choose_time"],
                reply_markup=await numbers_keyboard(chat_id, "time"),
            )

        case "switch":
            settings = await get_antiflood_settings(chat_id)
            enable = not settings["enable"]
            await save_antiflood_settings(chat_id, enable=enable)

            status = TEXTS["status"].format(
                "‚úÖ" if enable else "‚ùå",
                "–ê–Ω—Ç–∏—Ñ–ª—É–¥ –≤–∫–ª—é—á—ë–Ω" if enable else "–ê–Ω—Ç–∏—Ñ–ª—É–¥ –≤—ã–∫–ª—é—á–µ–Ω",
            )
            await callback.message.edit_text(
                text=TEXTS["main"] + status, reply_markup=await antiflood_kb(chat_id)
            )

        case "action":
            action = data_parts[2]
            await save_antiflood_settings(chat_id, action=action)

            await callback.message.edit_text(
                text=TEXTS["main"]
                + TEXTS["action_set"].format(TEXTS["moderation_actions"][action]),
                reply_markup=await antiflood_kb(chat_id),
                parse_mode="HTML",
            )

        case "duration":
            await state.update_data(chat_id=chat_id)
            await callback.message.edit_text(
                text=TEXTS["time_input"], reply_markup=await back_to_antiflood(chat_id)
            )
            await state.set_state(AntiFlood.DURATION)

        case "delete_messages":
            settings = await get_antiflood_settings(chat_id)
            enable = not settings["delete_message"]
            await save_antiflood_settings(chat_id, delete_message=enable)

            status = TEXTS["status"].format(
                "‚úÖ" if enable else "‚ùå",
                "–£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è" if enable else "–£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
            )
            await callback.message.edit_text(
                text=TEXTS["main"] + status, reply_markup=await antiflood_kb(chat_id)
            )

        case "journal":
            settings = await get_antiflood_settings(chat_id)
            enable = not settings["journal"]
            await save_antiflood_settings(chat_id, journal=enable)

            status = TEXTS["status"].format(
                "‚úÖ" if enable else "‚ùå",
                "–ñ—É—Ä–Ω–∞–ª –≤–∫–ª—é—á–µ–Ω" if enable else "–ñ—É—Ä–Ω–∞–ª –≤—ã–∫–ª—é—á–µ–Ω",
            )
            await callback.message.edit_text(
                text=TEXTS["main"] + status, reply_markup=await antiflood_kb(chat_id)
            )

        case "back":
            await callback.message.edit_text(
                text=TEXTS["main"], reply_markup=await antiflood_kb(chat_id)
            )
            await state.clear()


async def handle_antiflood_callback(
    callback: CallbackQuery, target: str, state: FSMContext
):
    data = await state.get_data()
    chat_id = data.get("chat_id")
    messages = callback.data.split(":")[3]

    match target:
        case "messages":
            await save_antiflood_settings(chat_id, messages=int(messages))
            await callback.message.edit_text(
                text=TEXTS["choose_messages"],
                reply_markup=await numbers_keyboard(chat_id, "messages"),
            )
        case "time":
            await save_antiflood_settings(chat_id, time=int(messages))
            await callback.message.edit_text(
                text=TEXTS["choose_time"],
                reply_markup=await numbers_keyboard(chat_id, "time"),
            )


@antiflood_router.message(AntiFlood.DURATION)
async def warn_duration(msg: Message, state: FSMContext):
    duration = str(msg.text)
    format_duration = await parse_seconds_time(duration)
    data = await state.get_data()
    chat_id = data.get("chat_id")

    if format_duration is None:
        await msg.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 30s, 5m, 2h, 1d, 1w –∏–ª–∏ 1y",
            reply_markup=await back_to_antiflood(chat_id),
        )
        return

    await save_antiflood_settings(chat_id, duration_action=str(format_duration))
    await msg.answer(text=TEXTS["saved"], reply_markup=await back_to_antiflood(chat_id))
    await state.clear()


async def check_antiflood(msg: Message, chat_id: int, user_id: int) -> None:
    try:
        settings = await get_antiflood_settings(chat_id)
        if not settings["enable"]:
            return

        messages_limit = settings["messages"]
        time_limit = settings["time"]
        action = settings["action"]

        redis_key = f"antiflood:{chat_id}:{user_id}"
        punished_key = f"punished:{chat_id}:{user_id}"
        flood_messages_key = f"flood_msgs:{chat_id}:{user_id}"

        is_punished = await redis_client.exists(punished_key)
        if is_punished:
            return

        async with redis_client.pipeline() as pipe:
            pipe.incr(redis_key)
            pipe.expire(redis_key, time_limit)
            pipe.rpush(flood_messages_key, msg.message_id)
            pipe.expire(flood_messages_key, time_limit)
            result = await pipe.execute()

            current_count = result[0]

            if current_count > messages_limit:
                await redis_client.setex(punished_key, time_limit, "1")

                flooded_messages = await redis_client.lrange(flood_messages_key, 0, -1)
                for msg_id in flooded_messages:
                    try:
                        await msg.bot.delete_message(chat_id, int(msg_id))
                    except Exception:
                        pass

                if action:
                    await punish_user(
                        msg, action, settings["duration_action"], "—Ñ–ª—É–¥ –≤ —á–∞—Ç–µ."
                    )

                await redis_client.delete(redis_key)
                await redis_client.delete(flood_messages_key)
    except Exception:
        pass
