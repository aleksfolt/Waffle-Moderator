import os

import opennsfw2 as n2
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from BaseModeration.BaseModerationHelpers import (
    format_keyboard,
    parse_seconds_time,
    punish_user,
)
from database.nsfwFilter import get_nsfwFilter_settings, save_nsfwFilter_settings
from keyboards.moderationKeyboards import edit_message_kb, edit_message_text_kb
from keyboards.nsfwKeyboards import nsfw_back, nsfw_kb
from utils.states import EditForm, Nsfw, ModStates
from utils.texts import BUTTONS_MESSAGE

nsfw_router = Router()

TEXTS = {
    "main": (
        "üîû <b>–§–∏–ª—å—Ç—Ä –ø–æ—Ä–Ω–æ</b>\n\n"
        "–í —ç—Ç–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, "
        "–∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—é –≤ –≥—Ä—É–ø–ø—É. –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç <b>OpenNSFW 2</b> –¥–ª—è "
        "–∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. üö®üìµ"
    ),
    "filter_status": (
        "\n\n"
        "{} <b>–°—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n"
        "‚îî –§–∏–ª—å—Ç—Ä NSFW {}\n"
        "‚îî –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –ø—Ä–æ–≤–µ—Ä–∫—É"
    ),
    "time_input": (
        "‚è± <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–π—á–∞—Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–∫–∞–∑–∞–Ω–∏—è\n"
        "‚îî –ú–∏–Ω–∏–º—É–º: 30 —Å–µ–∫—É–Ω–¥\n"
        "‚îî –ú–∞–∫—Å–∏–º—É–º: 365 –¥–Ω–µ–π\n\n"
        "–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞:\n"
        "‚îî 3 m, 2 d, 12 h, 4 m, 34 s\n\n"
        "–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:\n"
        "‚îî d - –¥–Ω–∏\n"
        "‚îî h - —á–∞—Å—ã\n"
        "‚îî m - –º–∏–Ω—É—Ç—ã\n"
        "‚îî s - —Å–µ–∫—É–Ω–¥—ã"
    ),
    "journal_status": (
        "\n\n" "{} <b>–°—Ç–∞—Ç—É—Å –∂—É—Ä–Ω–∞–ª–∞:</b>\n" "‚îî –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ {}\n" "‚îî {}"
    ),
    "percentage_input": (
        "üìä <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è NSFW</b>\n\n"
        "‚îî –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {}%\n"
        "‚îî –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è NSFW\n"
        "‚îî –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 0-100%\n"
        "‚îî –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:"
    ),
    "error": (
        "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n\n"
        "‚îî –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 0-100%\n"
        "‚îî –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ"
    ),
    "success": (
        "‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã</b>\n\n"
        "‚îî –ù–æ–≤—ã–π –ø–æ—Ä–æ–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è NSFW: {}%\n"
        "‚îî –ï—Å–ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –±—É–¥–µ—Ç —É–≤–µ—Ä–µ–Ω–∞ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ {}%, –∫–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è NSFW\n"
        "‚îî –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É"
    ),
    "settings": (
        "üìÑ –¢–µ–∫—Å—Ç: {} {}\n\n" "üëâüèª –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    ),
    "edit_text": (
        "üëâüèª –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (HTML —Ä–∞–∑—Ä–µ—à—ë–Ω)."
    ),
}


@nsfw_router.callback_query(F.data.startswith("fnsfw:"))
async def fnsfw_callback(callback: CallbackQuery, state: FSMContext):
    chat_id = callback.data.split(":")[1]
    await state.set_state(ModStates.managing_chat)
    await state.update_data(chat_id=chat_id)
    await callback.message.edit_text(
        text=TEXTS["main"], reply_markup=await nsfw_kb(chat_id), parse_mode="HTML"
    )


@nsfw_router.callback_query(F.data.startswith("nsfw:"))
async def nsfw_callback(callback: CallbackQuery, state: FSMContext):
    data_parts = callback.data.split(":")
    data = await state.get_data()
    chat_id = int(data.get("chat_id"))
    action = data_parts[1]

    match action:
        case "switch":
            settings = await get_nsfwFilter_settings(chat_id)
            enable = not settings["enable"]
            await save_nsfwFilter_settings(chat_id, enable=enable)

            status = TEXTS["filter_status"].format(
                "‚úÖ" if enable else "‚ùå", "–≤–∫–ª—é—á–µ–Ω" if enable else "–≤—ã–∫–ª—é—á–µ–Ω"
            )
            await callback.message.edit_text(
                text=TEXTS["main"] + status,
                reply_markup=await nsfw_kb(chat_id),
                parse_mode="HTML",
            )

        case "journal":
            settings = await get_nsfwFilter_settings(chat_id)
            journal = not settings["journal"]
            await save_nsfwFilter_settings(chat_id, journal=journal)

            status = TEXTS["journal_status"].format(
                "üìã" if journal else "‚ùå",
                "–≤–∫–ª—é—á–µ–Ω–æ" if journal else "–≤—ã–∫–ª—é—á–µ–Ω–æ",
                "–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è" if journal else "–î–µ–π—Å—Ç–≤–∏—è –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è",
            )
            await callback.message.edit_text(
                text=TEXTS["main"] + status,
                reply_markup=await nsfw_kb(chat_id),
                parse_mode="HTML",
            )

        case "percentage":
            settings = await get_nsfwFilter_settings(chat_id)
            await state.update_data(chat_id=chat_id)
            await callback.message.edit_text(
                text=TEXTS["percentage_input"].format(settings["percent"]),
                parse_mode="HTML",
                reply_markup=await nsfw_back(chat_id),
            )
            await state.set_state(Nsfw.PERCENTAGE)

        case "action":
            action = data_parts[2]
            await save_nsfwFilter_settings(chat_id, action=action)
            await callback.message.edit_text(
                text=TEXTS["main"],
                reply_markup=await nsfw_kb(chat_id),
                parse_mode="HTML",
            )

        case "duration":
            await callback.message.edit_text(
                text=TEXTS["time_input"],
                parse_mode="HTML",
                reply_markup=await nsfw_back(chat_id),
            )
            await state.update_data(chat_id=chat_id)
            await state.set_state(Nsfw.DURATION)

        case "settings":
            settings = await get_nsfwFilter_settings(chat_id)
            await callback.message.edit_text(
                text=TEXTS["settings"].format(
                    "‚úÖ" if settings["text"] else "‚ùå", settings["text"]
                ),
                reply_markup=await edit_message_kb(chat_id, "nsfw"),
                parse_mode="HTML",
            )

        case "back":
            await callback.message.edit_text(
                text=TEXTS["main"],
                reply_markup=await nsfw_kb(chat_id),
                parse_mode="HTML",
            )
            await state.clear()


async def handle_nsfw_callback(callback: CallbackQuery, target: str, state: FSMContext):
    chat_id = int(callback.data.split(":")[-1])

    match target:
        case "text":
            await callback.message.edit_text(
                text=TEXTS["edit_text"],
                reply_markup=await edit_message_text_kb(
                    chat_id, "nsfw", to_delete="text"
                ),
                parse_mode="HTML",
            )
            await state.set_state(EditForm.TEXT)

        case "buttons":
            await callback.message.edit_text(
                text=BUTTONS_MESSAGE,
                reply_markup=await edit_message_text_kb(
                    chat_id, "nsfw", to_delete="buttons"
                ),
                parse_mode="HTML",
                disable_web_page_preview=True,
            )
            await state.set_state(EditForm.BUTTONS)

        case "preview":
            settings = await get_nsfwFilter_settings(chat_id)
            await callback.message.edit_text(
                text=settings["text"],
                reply_markup=await format_keyboard(settings["buttons"]),
                parse_mode="HTML",
            )
            await callback.message.answer(
                text=TEXTS["settings"].format(
                    "‚úÖ" if settings["text"] else "‚ùå", settings["text"]
                ),
                reply_markup=await edit_message_kb(chat_id, "nsfw"),
                parse_mode="HTML",
            )

        case target if target.startswith("del"):
            to_del = target.split("del")[1]
            match to_del:
                case "text":
                    await save_nsfwFilter_settings(
                        chat_id, text="–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!"
                    )
                case _:
                    await save_nsfwFilter_settings(chat_id, buttons=[])

            settings = await get_nsfwFilter_settings(chat_id)
            await callback.message.edit_text(
                text=TEXTS["settings"].format(
                    "‚úÖ" if settings["text"] else "‚ùå", settings["text"]
                ),
                reply_markup=await edit_message_kb(chat_id, "nsfw"),
                parse_mode="HTML",
            )

        case "back":
            await callback.message.edit_text(
                text=TEXTS["main"],
                reply_markup=await nsfw_kb(chat_id),
                parse_mode="HTML",
            )

        case "back_to_edit":
            settings = await get_nsfwFilter_settings(chat_id)
            await callback.message.edit_text(
                text=TEXTS["settings"].format(
                    "‚úÖ" if settings["text"] else "‚ùå", settings["text"]
                ),
                reply_markup=await edit_message_kb(chat_id, "nsfw"),
                parse_mode="HTML",
            )
            await state.clear()


@nsfw_router.message(Nsfw.PERCENTAGE)
async def nsfw_percentage(message: Message, state: FSMContext):
    data = await state.get_data()
    chat_id = data.get("chat_id")

    try:
        percentage = message.text.strip()
        percentage_value = int(percentage)

        if not (0 <= percentage_value <= 100):
            raise ValueError

    except (ValueError, TypeError):
        await message.answer(text=TEXTS["error"], parse_mode="HTML")
        return

    await save_nsfwFilter_settings(chat_id, percent=percentage_value)
    await message.answer(
        text=TEXTS["success"].format(percentage_value, percentage_value),
        parse_mode="HTML",
        reply_markup=await nsfw_back(chat_id),
    )
    await state.clear()


@nsfw_router.message(Nsfw.DURATION)
async def nsfw_duration(message: Message, state: FSMContext):
    data = await state.get_data()
    chat_id = data.get("chat_id")
    try:
        duration = message.text.strip()
        duration_value = str(await parse_seconds_time(duration))
        if duration_value is None:
            await message.answer(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 30s, 5m, 2h, 1d, 1w –∏–ª–∏ 1y",
                reply_markup=await nsfw_back(chat_id),
            )
            return
        await save_nsfwFilter_settings(chat_id, duration_action=duration_value)
        await message.answer(
            text=f"‚è≥ –í—Ä–µ–º—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {duration}.",
            parse_mode="HTML",
            reply_markup=await nsfw_back(chat_id),
        )
        await state.clear()
    except (ValueError, TypeError):
        await message.answer(
            text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", parse_mode="HTML"
        )
        return


async def check_nsfw_photo(msg: Message, chat_id: int) -> None:
    try:
        nsfw_settings = await get_nsfwFilter_settings(chat_id)
        if not nsfw_settings["enable"]:
            return

        file_id = msg.photo[-1].file_id
        file_path = f"/tmp/{file_id}.jpg"

        await msg.bot.download(file_id, file_path)

        try:
            nsfw_score = n2.predict_image(file_path)
            print(nsfw_score)

            if nsfw_score * 100 >= nsfw_settings["percent"]:
                if nsfw_settings["delete_message"]:
                    await msg.delete()
                await punish_user(
                    msg,
                    nsfw_settings["action"],
                    nsfw_settings["duration_action"],
                    nsfw_settings["text"],
                )
        finally:
            if os.path.exists(file_path):
                os.remove(file_path)
    except Exception:
        pass
